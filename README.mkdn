[![Build Status](https://travis-ci.org/RsrchBoy/Test-Moose-More.svg?branch=master)](https://travis-ci.org/RsrchBoy/Test-Moose-More)
[![Kwalitee status](http://cpants.cpanauthors.org/dist/Test-Moose-More.png)](http://cpants.charsbar.org/dist/overview/Test-Moose-More)
[![Coverage Status](https://coveralls.io/repos/RsrchBoy/Test-Moose-More/badge.png?branch=master)](https://coveralls.io/r/RsrchBoy/Test-Moose-More?branch=master)

# NAME

Test::Moose::More - More tools for testing Moose packages

# VERSION

This document describes version 0.032 of Test::Moose::More - released July 10, 2015 as part of Test-Moose-More.

# SYNOPSIS

    use Test::Moose::More;

    is_class_ok 'Some::Class';
    is_role_ok  'Some::Role';
    has_method_ok 'Some::Class', 'foo';

    # ... etc

# DESCRIPTION

This package contains a number of additional tests that can be employed
against Moose classes/roles.  It is intended to replace [Test::Moose](https://metacpan.org/pod/Test::Moose) in your
tests, and re-exports any tests that it has and we do not, yet.

# FUNCTIONS

## known\_sugar

Returns a list of all the known standard Moose sugar (has, extends, etc).

# TEST\_FUNCTIONS

## meta\_ok $thing

Tests $thing to see if it has a metaclass; $thing may be the class name or
instance of the class you wish to check.

## does\_ok $thing, < $role | \\@roles >, \[ $message \]

Checks to see if $thing does the given roles.  $thing may be the class name or
instance of the class you wish to check.

Note that the message will be taken verbatim unless it contains `%s`
somewhere; this will be replaced with the name of the role being tested for.

## does\_not\_ok $thing, < $role | \\@roles >, \[ $message \]

Checks to see if $thing does not do the given roles.  $thing may be the class
name or instance of the class you wish to check.

Note that the message will be taken verbatim unless it contains `%s`
somewhere; this will be replaced with the name of the role being tested for.

## has\_attribute\_ok $thing, $attribute\_name, \[ $message \]

Checks `$thing` for an attribute named `$attribute_name`; `$thing` may be a
class name, instance, or role name.

## has\_method\_ok $thing, @methods

Queries $thing's metaclass to see if $thing has the methods named in @methods.

## role\_wraps\_around\_method\_ok $role, @methods

Queries $role's metaclass to see if $role wraps the methods named in
@methods with an around method modifier.

## role\_wraps\_before\_method\_ok $role, @methods

Queries $role's metaclass to see if $role wraps the methods named in
@methods with an before method modifier.

## role\_wraps\_after\_method\_ok $role, @methods

Queries $role's metaclass to see if $role wraps the methods named in
@methods with an after method modifier.

## requires\_method\_ok $thing, @methods

Queries $thing's metaclass to see if $thing requires the methods named in
@methods.

Note that this really only makes sense if $thing is a role.

## is\_immutable\_ok $thing

Passes if $thing is immutable.

## is\_not\_immutable\_ok $thing

Passes if $thing is not immutable; that is, is mutable.

## is\_role\_ok $thing

Passes if $thing's metaclass is a [Moose::Meta::Role](https://metacpan.org/pod/Moose::Meta::Role).

## is\_class\_ok $thing

Passes if $thing's metaclass is a [Moose::Meta::Class](https://metacpan.org/pod/Moose::Meta::Class).

## is\_anon\_ok $thing

Passes if $thing is "anonymous".

## is\_not\_anon\_ok $thing

Passes if $thing is not "anonymous".

## check\_sugar\_removed\_ok $thing

Ensures that all the standard Moose sugar is no longer directly callable on a
given package.

## check\_sugar\_ok $thing

Checks and makes sure a class/etc can still do all the standard Moose sugar.

## validate\_thing

Runs a bunch of tests against the given `$thing`, as defined:

    validate_thing $thing => (

        attributes => [ ... ],
        methods    => [ ... ],
        isa        => [ ... ],

        # ensures sugar is/is-not present
        sugar      => 0,

        # ensures $thing does these roles
        does       => [ ... ],

        # ensures $thing does not do these roles
        does_not   => [ ... ],
    );

`$thing` can be the name of a role or class, an object instance, or a
metaclass.

- isa => \[ ... \]

    A list of superclasses thing should have.

- anonymous => 0|1

    Check to see if the class is/isn't anonymous.

- does => \[ ... \]

    A list of roles the thing should do.

- does\_not => \[ ... \]

    A list of roles the thing should not do.

- attributes => \[ ... \]

    The attributes list specified here is in the form of a list of names, each optionally
    followed by a hashref of options to test the attribute for; this hashref takes the
    same arguments ["validate\_attribute"](#validate_attribute) does.  e.g.:

        validate_thing $thing => (

            attributes => [
                'foo',
                'bar',
                baz => { is => 'ro', ... },
                'bip',
            ],
        );

- methods => \[ ... \]

    A list of methods the thing should have.

- sugar => 0|1

    Ensure that thing can/cannot do the standard Moose sugar.

## validate\_role

The same as validate\_thing(), but ensures `$thing` is a role, and allows for
additional role-specific tests.

    validate_role $thing => (

        required_methods => [ ... ],

        # ...and all other options from validate_thing()
    );

- required\_methods => \[ ... \]

    A list of methods the role requires a consuming class to supply.

## validate\_class

The same as validate\_thing(), but ensures `$thing` is a class, and allows for
additional class-specific tests.

    validate_class $thing => (

        isa  => [ ... ],

        attributes => [ ... ],
        methods    => [ ... ],
        isa        => [ ... ],

        # ensures sugar is/is-not present
        sugar      => 0,

        # ensures $thing does these roles
        does       => [ ... ],

        # ensures $thing does not do these roles
        does_not   => [ ... ],

        # ...and all other options from validate_thing()
    );

- immutable => 0|1

    Checks the class to see if it is/isn't immutable.

## validate\_attribute

validate\_attribute() allows you to test how an attribute looks once built and
attached to a class.

Let's say you have an attribute defined like this:

    has foo => (
        traits  => [ 'TestRole' ],
        is      => 'ro',
        isa     => 'Int',
        builder => '_build_foo',
        lazy    => 1,
    );

You can use validate\_attribute() to ensure that it's built out in the way you
expect:

    validate_attribute TestClass => foo => (

        # tests the attribute metaclass instance to ensure it does the roles
        -does => [ 'TestRole' ],
        # tests the attribute metaclass instance's inheritance
        -isa  => [ 'Moose::Meta::Attribute' ], # for demonstration's sake

        traits   => [ 'TestRole' ],
        isa      => 'Int',
        does     => 'Bar',
        handles  => { },
        reader   => 'foo',
        builder  => '_build_foo',
        default  => undef,
        init_arg => 'foo',
        lazy     => 1,
        required => undef,
    );

Options passed to validate\_attribute() prefixed with '-' test the attribute's metaclass
instance rather than a setting on the attribute; that is, '-does' ensures that the
metaclass does a particular role (e.g. [MooseX::AttributeShortcuts](https://metacpan.org/pod/MooseX::AttributeShortcuts)), while 'does' tests
the setting of the attribute to require the value do a given role.

## attribute\_options\_ok

Validates that an attribute is set up as expected; like validate\_attribute(),
but only concerns itself with attribute options.

# SEE ALSO

Please see those modules/websites for more information related to this module.

- [Test::Moose](https://metacpan.org/pod/Test::Moose)

# BUGS

Please report any bugs or feature requests on the bugtracker website
https://github.com/RsrchBoy/Test-Moose-More/issues

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

# AUTHOR

Chris Weyl <cweyl@alumni.drew.edu>

## I'm a material boy in a material world

<div>
    <a href="https://gratipay.com/RsrchBoy/"><img src="http://img.shields.io/gratipay/RsrchBoy.svg" /></a>
    <a href="http://bit.ly/rsrchboys-wishlist"><img src="http://wps.io/wp-content/uploads/2014/05/amazon_wishlist.resized.png" /></a>
    <a href="https://flattr.com/submit/auto?user_id=RsrchBoy&url=https%3A%2F%2Fgithub.com%2FRsrchBoy%2FTest-Moose-More&title=RsrchBoy's%20CPAN%20Test-Moose-More&tags=%22RsrchBoy's%20Test-Moose-More%20in%20the%20CPAN%22"><img src="http://api.flattr.com/button/flattr-badge-large.png" /></a>
</div>

Please note **I do not expect to be gittip'ed or flattr'ed for this work**,
rather **it is simply a very pleasant surprise**. I largely create and release
works like this because I need them or I find it enjoyable; however, don't let
that stop you if you feel like it ;)

[Flattr](https://flattr.com/submit/auto?user_id=RsrchBoy&url=https%3A%2F%2Fgithub.com%2FRsrchBoy%2FTest-Moose-More&title=RsrchBoy&#x27;s%20CPAN%20Test-Moose-More&tags=%22RsrchBoy&#x27;s%20Test-Moose-More%20in%20the%20CPAN%22),
[Gratipay](https://gratipay.com/RsrchBoy/), or indulge my
[Amazon Wishlist](http://bit.ly/rsrchboys-wishlist)...  If and \*only\* if you so desire.

# CONTRIBUTORS

- Chad Granum <chad.granum@dreamhost.com>
- Karen Etheridge <ether@cpan.org>

# COPYRIGHT AND LICENSE

This software is Copyright (c) 2012 by Chris Weyl.

This is free software, licensed under:

    The GNU Lesser General Public License, Version 2.1, February 1999
